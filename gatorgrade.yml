setup: |
  echo "üêä Attempt to install ruff"
  echo "üêä Will not re-install if already installed"
  pipx install ruff
---

# Assessment of Honor Code {{{

- README.md:
    - description: Ensure that the README.md file exists inside of the root of the GitHub repository
      check: ConfirmFileExists
    - description: Delete the phrase 'Add Your Name Here' and add your own name as an Honor Code pledge in README.md
      check: MatchFileFragment
      objectives: "LO5"
      options:
        fragment: "Add Your Name Here"
        count: 0
        exact: true
    - description: Retype the every word in the Honor Code pledge in README.md
      check: MatchFileFragment
      objectives: "LO5"
      options:
        fragment: "I adhered to the Allegheny College Honor Code while completing this assessment."
        count: 2
        exact: true

# }}}

# Assessment of Program Characteristics {{{

# perform checks on the assessment.py file
- source/assessment.py:
    - description: Ensure that assessment.py file exists in the source/ directory
      check: ConfirmFileExists
      objectives: "LO5"
    - description: Complete all TODOs, remove the TODO markers, and rewrite comments for assessment.py
      check: MatchFileFragment
      objectives: "LO5"
      options:
        fragment: TODO
        count: 0
        exact: true

# run a command: ruff check with default settings found in .ruff.toml file
- description: Ensure that the source code follows an industry-standard programming rules using the command 'ruff check'
  objectives: "LO4, LO5"
  command: ruff check source/assessment.py

# run a command: ruff format with default settings found in .ruff.toml file
- description: Ensure that the source code adheres to an industry-standard format using the command 'ruff format'
  objectives: "LO4, LO5"
  command: ruff format source/assessment.py --check

# }}}

# Assessment Based on Program Output {{{

# run the program and confirm the existence of fragments in its output
- description: "Run a program and confirm the correct number of non-blank lines in the output when running the assessment.py program"
  check: CountCommandOutput
  objectives: "LO4, LO5"
  options:
    command: "python source/assessment.py"
    count: 6
    exact: true

# run the program and confirm the existence of fragments in its output
- description: "Run the program and confirm the existence of correct output for part one of the assessment"
  check: MatchCommandFragment
  objectives: "LO2, LO5"
  options:
    command: "python source/assessment.py"
    fragment: "100 / 5 / True"
    count: 1
    exact: true

# run the program and confirm the existence of fragments in its output
- description: "Run the program and confirm the existence of correct output for part two of the assessment"
  check: MatchCommandFragment
  objectives: "LO1, LO2"
  options:
    command: "python source/assessment.py"
    fragment: "3 / 2 / 2 / 1 / 0 / True"
    count: 1
    exact: true

# run the program and confirm the existence of fragments in its output
- description: "Run the program and confirm the existence of correct output for part three of the assessment"
  check: MatchCommandFragment
  objectives: "LO1, LO2"
  options:
    command: "python source/assessment.py"
    fragment: "4 / 3 / 2 / 1 / 0 / True"
    count: 1
    exact: true

# run the program and confirm the existence of fragments in its output
- description: "Run the program and confirm the existence of correct output for part four of the assessment"
  check: MatchCommandFragment
  objectives: "LO1, LO2"
  options:
    command: "python source/assessment.py"
    fragment: "3 / 36 / True"
    count: 1
    exact: true

# run the program and confirm the existence of fragments in its output
- description: "Run the program and confirm the existence of correct output for part five of the assessment"
  check: MatchCommandFragment
  objectives: "LO2"
  options:
    command: "python source/assessment.py"
    fragment: "('2', 2) / ('Pharmacist, hospital', 3) / True"
    count: 1
    exact: true

# run the program and confirm the existence of fragments in its output
# Note: this does not check for the existing of the timing as it may vary
# depending on the cloud-based computer to which the assessment is assigned
- description: "Run the program and confirm the existence of correct output for part six of the assessment"
  check: MatchCommandFragment
  objectives: "LO3"
  options:
    command: "python source/assessment.py"
    fragment: "Result: [['apple', 'red'], ['apple', 'green']] / Time:"
    count: 1
    exact: true

# }}}

# Assessment based on the program having the correct performance equation {{{

# perform a check on the source code of the assessment.py file
- source/assessment.py:
    - description: "Confirm that the program contains the correct performance equation for part six of the assessment"
      check: MatchFileFragment
      objectives: "LO3"
      options:
        fragment: "execution_time = end_time - start_time"
        count: 1
        exact: true

# }}}
